<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[Tiro’s blog]]></title>
  <subtitle><![CDATA[一个应该要不错的博客]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://hexo.zthero.com/"/>
  <updated>2015-09-25T08:09:43.000Z</updated>
  <id>http://hexo.zthero.com/</id>
  
  <author>
    <name><![CDATA[Tirozhang]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[频繁模式挖掘]]></title>
    <link href="http://hexo.zthero.com/2015/09/18/introduction-to-frequnt-pattern/"/>
    <id>http://hexo.zthero.com/2015/09/18/introduction-to-frequnt-pattern/</id>
    <published>2015-09-18T04:41:09.000Z</published>
    <updated>2015-09-25T08:09:43.000Z</updated>
    <content type="html"><![CDATA[<p>本章介绍了频繁模式挖掘，以及Apriori算法python实现。<br><a id="more"></a></p>
<h3 id="基本概念">基本概念</h3><blockquote>
<ul>
<li>频繁模式：频繁地出现在数据集中的模式，例如项集，子结构，子序列等</li>
<li>关联规则：牛奶=&gt;鸡蛋【支持度=2%，置信度=60%】</li>
<li>挖掘目标：频繁模式，频繁项集，关联规则等</li>
<li>支持度：分析中的全部事务的2%同时贩买了牛奶和鸡蛋</li>
<li>置信度：贩买了牛奶的人中有60%也贩买了鸡蛋</li>
<li>最小支持度阈值和最小置信度阈值：由挖掘者戒领域专家设定</li>
<li>项集：项（商品）的集合</li>
<li>k-项集：k个项组成的项集</li>
<li>支持度计数：项集的事务数</li>
<li>频繁项集：满足最小支持度的项集，频繁k-项集一般记为$L_k$</li>
<li>强关联规则：满足最小支持度阈值和最小置信度阈值的规则</li>
</ul>
</blockquote>
<h3 id="购物篮分析">购物篮分析</h3><p>频繁模式挖掘的一个典型例子就是<em>购物篮分析</em>。该过程通过分析用户放入他们“购物篮”中的商品之间的关联，分析用户的购买习惯。</p>
<blockquote>
<ul>
<li>牛奶与面包：经典的购买组合</li>
<li>啤酒与尿布：欢迎百度百科</li>
</ul>
</blockquote>
<h3 id="频繁模式挖掘">频繁模式挖掘</h3><p>一般而言，频繁模式挖掘是一个两步的过程：</p>
<ol>
<li><strong>找出所有的频繁项集</strong>：根据定义，这些项集的每一个频繁出现的次数至少与预定义的最小支持计数min_sup一样。</li>
<li><strong>由频繁项集产生强关联规则</strong>：根据定义，这些规则必须满足最小支持度和最小置信度。</li>
</ol>
<p>我们就根据这两步来介绍Apriori算法的具体实现。</p>
<h3 id="Apriori算法">Apriori算法</h3><h4 id="找出所有的频繁项集">找出所有的频繁项集</h4><p><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_apriori.png" alt="Apriori算法流程图"></p>
<h4 id="由频繁项集产生强关联规则">由频繁项集产生强关联规则</h4><p><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_apriori_deep.png" alt="关联规则列表"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This Python file uses the following encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">       <span class="string">'t1'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a5'</span>],</span><br><span class="line">       <span class="string">'t2'</span>:[<span class="string">'a2'</span>,<span class="string">'a4'</span>],</span><br><span class="line">       <span class="string">'t3'</span>:[<span class="string">'a2'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t4'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a4'</span>],</span><br><span class="line">       <span class="string">'t5'</span>:[<span class="string">'a1'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t6'</span>:[<span class="string">'a2'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t7'</span>:[<span class="string">'a1'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t8'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a3'</span>,<span class="string">'a5'</span>],</span><br><span class="line">       <span class="string">'t9'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a3'</span>],</span><br><span class="line">&#125;</span><br><span class="line">min_sup = <span class="number">2</span></span><br><span class="line">C = []</span><br><span class="line">C.append([])</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出频繁1项集的集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_frequent_1_itemsets</span><span class="params">( D )</span>:</span></span><br><span class="line"></span><br><span class="line">    itemset = &#123;&#125;</span><br><span class="line">    res = [] </span><br><span class="line">    tempList = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> buyId <span class="keyword">in</span> D :</span><br><span class="line">        <span class="keyword">for</span> itemId <span class="keyword">in</span> D[buyId]:</span><br><span class="line">            <span class="keyword">if</span> itemset.has_key( itemId ): </span><br><span class="line">                itemset[itemId] +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                itemset[itemId] =<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> itemId <span class="keyword">in</span> itemset:</span><br><span class="line">        <span class="keyword">if</span> itemset[itemId] &gt;= min_sup:</span><br><span class="line">            temp=&#123;&#125;</span><br><span class="line">            temp[<span class="string">'item'</span>] = [itemId]</span><br><span class="line">            temp[<span class="string">'sup'</span>]  = itemset[itemId]</span><br><span class="line">            res.append(temp)</span><br><span class="line">            tempList.append(itemId)</span><br><span class="line">    C.append(tempList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"><span class="comment">#apriori 连接和剪枝</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">apriori_gen</span><span class="params">( L )</span>:</span></span><br><span class="line"></span><br><span class="line">    itemset =[]</span><br><span class="line">    res = []</span><br><span class="line">    tempList = []</span><br><span class="line">    startY = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> L:</span><br><span class="line">        startY += <span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> L[startY:]:</span><br><span class="line">            <span class="keyword">if</span> x == y : <span class="keyword">continue</span></span><br><span class="line">            <span class="keyword">if</span> x[<span class="string">'item'</span>][:-<span class="number">1</span>] == y[<span class="string">'item'</span>][:-<span class="number">1</span>]:</span><br><span class="line">                temp=&#123;&#125;</span><br><span class="line">                temp[<span class="string">'item'</span>] = copy.deepcopy(x[<span class="string">'item'</span>])</span><br><span class="line">                temp[<span class="string">'item'</span>].append( y[<span class="string">'item'</span>][-<span class="number">1</span>] )</span><br><span class="line">                temp[<span class="string">'item'</span>].sort()</span><br><span class="line">                <span class="keyword">if</span> has_infrequent_subset(temp[<span class="string">'item'</span>]):</span><br><span class="line">                    temp[<span class="string">'sup'</span>]  = get_sup( temp[<span class="string">'item'</span>] ) </span><br><span class="line">                    itemset.append(temp)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> itemset:</span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'sup'</span>] &gt;= min_sup:</span><br><span class="line">            res.append(item)</span><br><span class="line">            tempList.append(item[<span class="string">'item'</span>])</span><br><span class="line">    C.append(tempList)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#先验性质</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">has_infrequent_subset</span><span class="params">( c )</span>:</span></span><br><span class="line">    K = len(c) - <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span>  permutations( c ,K ):</span><br><span class="line">        <span class="keyword">if</span> x <span class="keyword">not</span> <span class="keyword">in</span> C[K] : <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取支持度计数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_sup</span><span class="params">( c )</span>:</span></span><br><span class="line">    sub = len( data )</span><br><span class="line">    <span class="keyword">for</span> buyId <span class="keyword">in</span> data :</span><br><span class="line">        <span class="keyword">for</span> itemId <span class="keyword">in</span> c:</span><br><span class="line">            <span class="keyword">if</span> itemId <span class="keyword">not</span> <span class="keyword">in</span> data[buyId]: </span><br><span class="line">                sub -=<span class="number">1</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> sub</span><br><span class="line"></span><br><span class="line">L=&#123;&#125;</span><br><span class="line">L[<span class="number">1</span>] = find_frequent_1_itemsets(data)</span><br><span class="line">res = apriori_gen( L[<span class="number">1</span>] )</span><br><span class="line">L[<span class="number">2</span>] = res</span><br><span class="line">res = apriori_gen( L[<span class="number">2</span>] )</span><br><span class="line"><span class="keyword">print</span> res</span><br></pre></td></tr></table></figure>
<h3 id="FP_growth算法">FP_growth算法</h3><p><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_FP_tree.png" alt="FP树构造"><br><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_FP_tree_deep.png" alt="FP树挖掘"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This Python file uses the following encoding: utf-8</span></span><br><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">data=&#123;</span><br><span class="line">       <span class="string">'t1'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a5'</span>],</span><br><span class="line">       <span class="string">'t2'</span>:[<span class="string">'a2'</span>,<span class="string">'a4'</span>],</span><br><span class="line">       <span class="string">'t3'</span>:[<span class="string">'a2'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t4'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a4'</span>],</span><br><span class="line">       <span class="string">'t5'</span>:[<span class="string">'a1'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t6'</span>:[<span class="string">'a2'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t7'</span>:[<span class="string">'a1'</span>,<span class="string">'a3'</span>],</span><br><span class="line">       <span class="string">'t8'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a3'</span>,<span class="string">'a5'</span>],</span><br><span class="line">       <span class="string">'t9'</span>:[<span class="string">'a1'</span>,<span class="string">'a2'</span>,<span class="string">'a3'</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局变量</span></span><br><span class="line">min_sup = <span class="number">2</span></span><br><span class="line">L=&#123;&#125;</span><br><span class="line">C=[]</span><br><span class="line"></span><br><span class="line"><span class="comment">#找出频繁1项集的集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_frequent_1_itemsets</span><span class="params">( D )</span>:</span></span><br><span class="line"></span><br><span class="line">    itemset = &#123;&#125;</span><br><span class="line">    res = [] </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> buyId <span class="keyword">in</span> D :</span><br><span class="line">        <span class="keyword">for</span> itemId <span class="keyword">in</span> D[buyId]:</span><br><span class="line">            <span class="keyword">if</span> itemset.has_key( itemId ): </span><br><span class="line">                itemset[itemId] +=<span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                itemset[itemId] =<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> itemId <span class="keyword">in</span> itemset:</span><br><span class="line">        <span class="keyword">if</span> itemset[itemId] &gt;= min_sup:</span><br><span class="line">            temp=&#123;&#125;</span><br><span class="line">            temp[<span class="string">'item'</span>] = [itemId]</span><br><span class="line">            temp[<span class="string">'sup'</span>]  = itemset[itemId]</span><br><span class="line">            res.append(temp)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment">#构造FP_tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FP_make_tree</span><span class="params">( D )</span>:</span></span><br><span class="line">    <span class="comment">#树根</span></span><br><span class="line">    tree = &#123;<span class="string">'root'</span>:&#123;<span class="string">'child'</span>:&#123;&#125;,<span class="string">'times'</span>:<span class="number">0</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> buyId <span class="keyword">in</span> D :</span><br><span class="line">        res = sorted(D[buyId],cmp=compare)</span><br><span class="line">        temp = tree[<span class="string">'root'</span>][<span class="string">'child'</span>]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">if</span> temp.has_key( item ):</span><br><span class="line">                temp[item][<span class="string">'times'</span>] += <span class="number">1</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                temp[item] = &#123;&#125;</span><br><span class="line">                temp[item][<span class="string">'child'</span>] = &#123;&#125;</span><br><span class="line">                temp[item][<span class="string">'times'</span>] = <span class="number">1</span></span><br><span class="line">            temp = temp[item][<span class="string">'child'</span>]</span><br><span class="line">    <span class="keyword">return</span> tree</span><br><span class="line"></span><br><span class="line"><span class="comment">#挖掘FP_tree</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">FP_grouth</span><span class="params">( fp_tree , item )</span>:</span></span><br><span class="line">    </span><br><span class="line">    temp = &#123;&#125;</span><br><span class="line">    itemSet =[] </span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len( fp_tree ) == <span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span> </span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> fp_tree_child <span class="keyword">in</span> fp_tree[<span class="string">'child'</span>]:</span><br><span class="line">        <span class="keyword">if</span> fp_tree_child == item:</span><br><span class="line">            temp[item] = fp_tree[<span class="string">'child'</span>][fp_tree_child][<span class="string">'times'</span>]</span><br><span class="line">            <span class="keyword">return</span> temp</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            res = FP_grouth( fp_tree[<span class="string">'child'</span>][fp_tree_child] , item )</span><br><span class="line">            <span class="keyword">if</span> res != <span class="keyword">None</span>:</span><br><span class="line">                temp[fp_tree_child] = fp_tree[<span class="string">'child'</span>][fp_tree_child][<span class="string">'times'</span>]</span><br><span class="line">                temp[<span class="string">'child'</span>] = &#123;&#125; </span><br><span class="line">                temp[<span class="string">'child'</span>] = res</span><br><span class="line">                <span class="keyword">return</span> temp </span><br><span class="line"></span><br><span class="line"><span class="comment">#按支持度计数排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sort_sup</span><span class="params">( item )</span>:</span></span><br><span class="line">    <span class="keyword">return</span> item[<span class="string">'sup'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#按照1项集排序</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compare</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> cmp( C.index(x), C.index(y))</span><br><span class="line"></span><br><span class="line">L[<span class="number">1</span>] = find_frequent_1_itemsets(data)</span><br><span class="line">L[<span class="number">1</span>] = sorted(L[<span class="number">1</span>], key=sort_sup, reverse = <span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> L[<span class="number">1</span>]:</span><br><span class="line">    C.append(x[<span class="string">'item'</span>][<span class="number">0</span>])</span><br><span class="line">FP_tree = FP_make_tree( data )</span><br><span class="line"><span class="keyword">print</span> FP_grouth( FP_tree[<span class="string">'root'</span>] ,<span class="string">'a5'</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[模式挖掘,数据挖掘,读书笔记]]>
    
    </summary>
    
      <category term="Apriori" scheme="http://hexo.zthero.com/tags/Apriori/"/>
    
      <category term="数据挖掘" scheme="http://hexo.zthero.com/tags/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
      <category term="频繁模式挖掘" scheme="http://hexo.zthero.com/tags/%E9%A2%91%E7%B9%81%E6%A8%A1%E5%BC%8F%E6%8C%96%E6%8E%98/"/>
    
      <category term="数据挖掘" scheme="http://hexo.zthero.com/categories/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[集体智慧编程(二)]]></title>
    <link href="http://hexo.zthero.com/2015/09/09/collective-intelligence-2/"/>
    <id>http://hexo.zthero.com/2015/09/09/collective-intelligence-2/</id>
    <published>2015-09-09T12:41:09.000Z</published>
    <updated>2015-09-28T02:02:56.000Z</updated>
    <content type="html"><![CDATA[<p>本章介绍了两种基础的推荐型算法UserCF和ItemCF，初步了解大数据下，推荐系统的基本实现方案。<br><a id="more"></a></p>
<h3 id="协作型过滤">协作型过滤</h3><p>协同过滤是利用集体智慧的一个典型方法。要理解什么是协同过滤 (Collaborative Filtering, 简称CF)，首先想一个简单的问题，如果你现在想看个电影，但你不知道具体看哪部，你会怎么做？大部分的人会问问周围的朋友，看看最近有什么好看的电影推荐，而我们一般更倾向于从口味比较类似的朋友那里得到推荐。这就是协同过滤的核心思想。</p>
<p>协同过滤一般是在海量的用户中发掘出一小部分和你品位比较类似的，在协同过滤中，这些用户成为邻居，然后根据他们喜欢的其他东西组织成一个排序的目录推荐给你。</p>
<p>要实现协同过滤，需要以下几个步骤：</p>
<blockquote>
<ul>
<li>搜集偏好</li>
<li>寻找相近用户</li>
<li>推荐物品  </li>
</ul>
</blockquote>
<h3 id="搜集偏好">搜集偏好</h3><p>首先，我们要寻找一种表达不同人及其偏好的方法。这里我们用python的嵌套字典来实现。</p>
<p>在本章中所用的数据，是从国外的网站<a href="http://grouplens.org/datasets/" target="_blank" rel="external">grouplens</a>下载的<a href="http://dl.zthero.com/data/20150916/u.data" target="_blank" rel="external">u.data</a>。该数据总共四列，共分为用户ID、电影ID、用户评分、时间。我们只需根据前三列，生成相应的用户偏好字典。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成用户偏好字典</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_data</span><span class="params">()</span>:</span></span><br><span class="line">    result=&#123;&#125;</span><br><span class="line">    f = open(<span class="string">'data/u.data'</span>, <span class="string">'r'</span>)</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> lines:</span><br><span class="line">        <span class="comment">#按行分割数据</span></span><br><span class="line">        (userId , itemId , score,time ) = line.strip().split(<span class="string">"\t"</span>)</span><br><span class="line">        <span class="comment">#字典要提前定义</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> result.has_key( userId ):</span><br><span class="line">            result[userId]=&#123;&#125;</span><br><span class="line">        <span class="comment">#注意float,不然后续的运算存在类型问题</span></span><br><span class="line">        result[userId][itemId] = float(score)</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure>
<p>另外如果想在字典中显示展现电影名，方便分析，也可以根据<a href="http://dl.zthero.com/data/20150916/u.item" target="_blank" rel="external">u.item</a>中电影数据，预先生成电影的数据集。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将id替换为电影名 构造数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadMovieLens</span><span class="params">(path=<span class="string">'data'</span>)</span>:</span></span><br><span class="line">    <span class="comment"># Get movie titles</span></span><br><span class="line">    movies=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(path+<span class="string">'/u.item'</span>):</span><br><span class="line">        (id,title)=line.split(<span class="string">'|'</span>)[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">        movies[id]=title</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Load data</span></span><br><span class="line">    prefs=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> open(path+<span class="string">'/u.data'</span>):</span><br><span class="line">        (user,movieid,rating,ts)=line.split(<span class="string">'\t'</span>)</span><br><span class="line">        prefs.setdefault(user,&#123;&#125;)</span><br><span class="line">        prefs[user][movies[movieid]]=float(rating)</span><br><span class="line">    <span class="keyword">return</span> prefs</span><br></pre></td></tr></table></figure></p>
<p>根据上面两个函数中的一种，到此我们的用户数据集已经构造好了，由于数据量不是非常大，暂时放在内存中即可。<br>由于以上数据集比较抽象，不方便讲解，至此我们定义一个简单的数据集来讲解一些例子，一个简单的嵌套字典：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#用户：&#123;电影名称：评分&#125;</span></span><br><span class="line">critics=&#123;</span><br><span class="line">    <span class="string">'Lisa Rose'</span>: &#123;<span class="string">'Lady in the Water'</span>: <span class="number">2.5</span>, <span class="string">'Snakes on a Plane'</span>: <span class="number">3.5</span>,<span class="string">'Just My Luck'</span>: <span class="number">3.0</span>, <span class="string">'Superman Returns'</span>: <span class="number">3.5</span>, <span class="string">'You, Me and Dupree'</span>: <span class="number">2.5</span>,<span class="string">'The Night Listener'</span>: <span class="number">3.0</span>&#125;,</span><br><span class="line">    <span class="string">'Gene Seymour'</span>: &#123;<span class="string">'Lady in the Water'</span>: <span class="number">3.0</span>, <span class="string">'Snakes on a Plane'</span>: <span class="number">3.5</span>,<span class="string">'Just My Luck'</span>: <span class="number">1.5</span>, <span class="string">'Superman Returns'</span>: <span class="number">5.0</span>, <span class="string">'The Night Listener'</span>: <span class="number">3.0</span>,<span class="string">'You, Me and Dupree'</span>: <span class="number">3.5</span>&#125;, </span><br><span class="line">    <span class="string">'Michael Phillips'</span>:&#123;<span class="string">'Lady in the Water'</span>: <span class="number">2.5</span>, <span class="string">'Snakes on a Plane'</span>: <span class="number">3.0</span>,<span class="string">'Superman Returns'</span>: <span class="number">3.5</span>, <span class="string">'The Night Listener'</span>: <span class="number">4.0</span>&#125;,</span><br><span class="line">    <span class="string">'Claudia Puig'</span>: &#123;<span class="string">'Snakes on a Plane'</span>: <span class="number">3.5</span>, <span class="string">'Just My Luck'</span>: <span class="number">3.0</span>,<span class="string">'The Night Listener'</span>: <span class="number">4.5</span>, <span class="string">'Superman Returns'</span>: <span class="number">4.0</span>,<span class="string">'You, Me and Dupree'</span>: <span class="number">2.5</span>&#125;,</span><br><span class="line">    <span class="string">'Mick LaSalle'</span>: &#123;<span class="string">'Lady in the Water'</span>: <span class="number">3.0</span>, <span class="string">'Snakes on a Plane'</span>: <span class="number">4.0</span>, <span class="string">'Just My Luck'</span>: <span class="number">2.0</span>, <span class="string">'Superman Returns'</span>: <span class="number">3.0</span>, <span class="string">'The Night Listener'</span>: <span class="number">3.0</span>,</span><br><span class="line"><span class="string">'You, Me and Dupree'</span>: <span class="number">2.0</span>&#125;, </span><br><span class="line">    <span class="string">'Jack Matthews'</span>: &#123;<span class="string">'Lady in the Water'</span>: <span class="number">3.0</span>, <span class="string">'Snakes on a Plane'</span>: <span class="number">4.0</span>,<span class="string">'The Night Listener'</span>: <span class="number">3.0</span>, <span class="string">'Superman Returns'</span>: <span class="number">5.0</span>, <span class="string">'You, Me and Dupree'</span>: <span class="number">3.5</span>&#125;,</span><br><span class="line">    <span class="string">'Toby'</span>: &#123;<span class="string">'Snakes on a Plane'</span>:<span class="number">4.5</span>,<span class="string">'You, Me and Dupree'</span>:<span class="number">1.0</span>,<span class="string">'Superman Returns'</span>:<span class="number">4.0</span>&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="寻找相近用户">寻找相近用户</h3><p>收集完用户信息后，我们通过一些方法来确定两个用户之间品味的相似程度，计算他们的<strong>相似度评价值</strong>。有很多方法可以计算，我们在此介绍两套常见的方法：欧几里得距离和皮尔逊相关度。</p>
<h3 id="欧几里得距离">欧几里得距离</h3><p>欧几里得距离（euclidea nmetric）（也称欧式距离）是一个通常采用的距离定义，指在m维空间中两个点之间的真实距离，或者向量的自然长度（即该点到原点的距离）。在二维和三维空间中的欧氏距离就是两点之间的实际距离。</p>
<p>数学定义：<br>已知两点 <strong>A</strong> = (x_1,x_2,…,x_n)和<strong>B</strong> = (y_1,y_2,…,y_n)，则两点间距离：<br>$$|AB|=\sqrt{(x_1 - x_2)^2+(y_1 - y_2)^2+…+(x_n-y_n)^2}$$<br>接下来我们只要把数据集映射为坐标系就可以明显的比较出相似度，以”Snakes on a Plane”和”You, Me and Dupree”两部电影距离，有坐标系如下图：<br><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_chapter2_1.png" alt="欧几里得距离图例"></p>
<p>计算上图中Toby和Mick LaSalle的相似度：</p>
<pre><code>[shell]
&gt;&gt;from math import <span class="built_in">sqrt</span>
&gt;&gt;<span class="built_in">sqrt</span>(<span class="built_in">pow</span>( <span class="number">4.5</span>-<span class="number">4</span> , <span class="number">2</span> ) + <span class="built_in">pow</span>( <span class="number">1</span> - <span class="number">2</span> , <span class="number">2</span>))
<span class="number">1.118033988749895</span> 
</code></pre><p>上面的式子计算出了实际距离值，但在实际应用中，我们希望相似度越大返回的值越大，并且控制在0~1之间的值。为此，我们可以取函数值加1的倒数(加1是为了防止除0的情况)：</p>
<pre><code>[shell]
&gt;&gt;<span class="number">1</span>/(<span class="number">1</span>+<span class="built_in">sqrt</span>(<span class="built_in">pow</span>( <span class="number">4.5</span>-<span class="number">4</span> , <span class="number">2</span> ) + <span class="built_in">pow</span>( <span class="number">1</span> - <span class="number">2</span> , <span class="number">2</span>)))
<span class="number">0.4721359549995794</span>
</code></pre><p>接下来我们就可以封装一个基于欧几里得距离的相似度评价，具体python实现如下：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#欧几里得距离</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_distance</span><span class="params">( prefs,person1,person2 )</span>:</span></span><br><span class="line">    si=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> itemId <span class="keyword">in</span> prefs[person1]:</span><br><span class="line">        <span class="keyword">if</span> itemId <span class="keyword">in</span> prefs[person2]:</span><br><span class="line">            si[itemId] = <span class="number">1</span></span><br><span class="line">    <span class="comment">#no same item</span></span><br><span class="line">    <span class="keyword">if</span> len(si)==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    sum_of_squares = <span class="number">0.0</span>    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算距离 </span></span><br><span class="line">    sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],<span class="number">2</span>) <span class="keyword">for</span> item <span class="keyword">in</span> si])</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>/(<span class="number">1</span> + sqrt(sum_of_squares) )</span><br></pre></td></tr></table></figure></p>
<p>基于测试数据集critics，则可以计算两个人的相似度值为：</p>
<pre><code>[shell]
&gt;&gt;<span class="function"><span class="title">sim_distance</span><span class="params">( critics , <span class="string">'Toby'</span>, <span class="string">'Mick LaSalle'</span> )</span></span>
<span class="number">0.307692307692</span>
</code></pre><h3 id="皮尔逊相关度">皮尔逊相关度</h3><p>皮尔逊相关系数是一种度量两个变量间相关程度的方法。它是一个介于 1 和 -1 之间的值，其中，1 表示变量完全正相关， 0 表示无关，-1 表示完全负相关。</p>
<p><a href="http://changfengmingzhi.blog.163.com/blog/static/1671052882014101810481936/" target="_blank" rel="external">数学公式</a>：<br>$$\frac{\sum x_iy_i-\frac{\sum x_i\sum y_i}{n}}{\sqrt{\sum x_i^2-\frac{(\sum x_i)^2}{n}}\sqrt{\sum y_i^2-\frac{(\sum y_i)^2}{n}}}$$</p>
<p>与欧几里得距离不同，我们根据两个用户来建立笛卡尔坐标系，根据用户对相同电影的评分来建立点，如下图：<br><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_chapter2_2.png" alt="基于皮尔逊相关度的评分结果"><br>在图上，我们还可以看到一条线，因其绘制的原则是尽可能的接近图上所有点，故该线也称为<strong>最佳拟合线</strong>。用皮尔逊方法进行评价时，可以修正“<strong>夸大值</strong>”部分，例如某人对电影的要求更为严格，给出分数总是偏低。</p>
<p>python代码实现：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#皮尔逊相关度 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sim_pearson</span><span class="params">(prefs,p1,p2)</span>:</span></span><br><span class="line">    si=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> prefs[p1]: </span><br><span class="line">      <span class="keyword">if</span> item <span class="keyword">in</span> prefs[p2]: si[item]=<span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> len(si)==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    n=len(si)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#计算开始</span></span><br><span class="line">    sum1=sum([prefs[p1][it] <span class="keyword">for</span> it <span class="keyword">in</span> si])</span><br><span class="line">    sum2=sum([prefs[p2][it] <span class="keyword">for</span> it <span class="keyword">in</span> si])</span><br><span class="line">    </span><br><span class="line">    sum1Sq=sum([pow(prefs[p1][it],<span class="number">2</span>) <span class="keyword">for</span> it <span class="keyword">in</span> si])</span><br><span class="line">    sum2Sq=sum([pow(prefs[p2][it],<span class="number">2</span>) <span class="keyword">for</span> it <span class="keyword">in</span> si])   </span><br><span class="line">    </span><br><span class="line">    pSum=sum([prefs[p1][it]*prefs[p2][it] <span class="keyword">for</span> it <span class="keyword">in</span> si])</span><br><span class="line">    </span><br><span class="line">    num=pSum-(sum1*sum2/n)</span><br><span class="line">    den=sqrt((sum1Sq-pow(sum1,<span class="number">2</span>)/n)*(sum2Sq-pow(sum2,<span class="number">2</span>)/n))</span><br><span class="line">    <span class="comment">#计算结束</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> den==<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    r=num/den</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure></p>
<p>最后根据critics的数据计算Gene Seymour和Lisa Rose的相关度：</p>
<pre><code><span class="list">[<span class="keyword">shell</span>]
&gt;&gt;recommendations.sim_pearson<span class="list">(<span class="keyword">recommendations.critics</span>,<span class="variable">'Gene</span> Seymour',<span class="variable">'Lisa</span> Rose')</span> </span>
</code></pre><h3 id="为评论者打分">为评论者打分</h3><p>到此，我们就可以根据计算出用户之间的相关度，并根据相关度来生成相关度列表，找出与用户口味相同的其他用户。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#推荐用户</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">topMatches</span><span class="params">(prefs,person,n=<span class="number">5</span>,similarity=sim_distance)</span>:</span></span><br><span class="line">    <span class="comment">#python列表推导式</span></span><br><span class="line">    scores=[(similarity(prefs,person,other),other) <span class="keyword">for</span> other <span class="keyword">in</span> prefs <span class="keyword">if</span> other!=person]</span><br><span class="line">    scores.sort()</span><br><span class="line">    scores.reverse()</span><br><span class="line">    <span class="keyword">return</span> scores[<span class="number">0</span>:n]</span><br></pre></td></tr></table></figure>
<h3 id="推荐物品">推荐物品</h3><p>对于用户来说，找出与他具有相似爱好的人并不重要，主要是为他推荐他可能喜欢的物品，所以我们还需要根据用户间相似度进一步计算。例如为Toby推荐，由于数据不多，我们取得所有推荐者的相似度，再乘以他们对电影的评价，得出该电影对于Toby的推荐值，也可以认为是Toby可能为电影打的分数。如下图：<br><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_chapter2_3.png" alt="为Toby提供推荐"><br>我们通过计算其他用户对某个Toby没看过电影的加权和来得到总权重，最后除以相似度和，是为了防止某一电影被看过的多，总和会更多的影响，也称“<strong>归一化</strong>”处理。<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于用户推荐物品</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRecommendations</span><span class="params">(prefs,person,similarity=sim_pearson)</span>:</span></span><br><span class="line">    </span><br><span class="line">    totals=&#123;&#125;</span><br><span class="line">    simSums=&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> other <span class="keyword">in</span> prefs:</span><br><span class="line">        <span class="comment">#不和自己做比较</span></span><br><span class="line">        <span class="keyword">if</span> other == person: </span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        sim = similarity( prefs,person,other )</span><br><span class="line">        <span class="comment">#去除负相关的用户</span></span><br><span class="line">        <span class="keyword">if</span> sim&lt;=<span class="number">0</span>: <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> prefs[other]:</span><br><span class="line">            <span class="comment">#只对自己没看过的电影做评价</span></span><br><span class="line">            <span class="keyword">if</span> item <span class="keyword">in</span> prefs[person]:<span class="keyword">continue</span></span><br><span class="line">            totals.setdefault( item ,<span class="number">0</span> )</span><br><span class="line">            totals[item] += sim*prefs[other][item]</span><br><span class="line">            simSums.setdefault(item,<span class="number">0</span>)</span><br><span class="line">            simSums[item] += sim</span><br><span class="line">    <span class="comment">#归一化处理生成推荐列表</span></span><br><span class="line">    rankings=[(totals[item]/simSums[item],item) <span class="keyword">for</span> item <span class="keyword">in</span> totals]</span><br><span class="line">    <span class="comment">#rankings=[(total/simSums[item],item) for item,total in totals.items()]</span></span><br><span class="line">    rankings.sort()</span><br><span class="line">    rankings.reverse()</span><br><span class="line">    <span class="keyword">return</span> rankings</span><br></pre></td></tr></table></figure></p>
<h3 id="基于物品的协同过滤">基于物品的协同过滤</h3><p>以上所讲的都是基于用户间相似的推荐，下面我们看看基于物品的推荐。</p>
<p>同样，先构造数据集，即以物品为key的字典，格式为{电影:{用户:评分,用户:评分}}<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于物品的列表</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transformPrefs</span><span class="params">(prefs)</span>:</span></span><br><span class="line">    itemList =&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> person <span class="keyword">in</span> prefs:</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> prefs[person]:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> itemList.has_key( item ):</span><br><span class="line">                itemList[item]=&#123;&#125;</span><br><span class="line">                <span class="comment">#result.setdefault(item,&#123;&#125;)</span></span><br><span class="line">            itemList[item][person]=prefs[person][item]</span><br><span class="line">    <span class="keyword">return</span> itemList</span><br></pre></td></tr></table></figure></p>
<p>计算物品间的相似度，物品间相似的变化不会像人那么频繁，所以我们可以构造物品间相似的集合，存成文件重复利用：<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#构建基于物品相似度数据集</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">calculateSimilarItems</span><span class="params">(prefs,n=<span class="number">10</span>)</span>:</span></span><br><span class="line">    result=&#123;&#125;</span><br><span class="line">    itemPrefs=transformPrefs(prefs)</span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> itemPrefs:</span><br><span class="line">        c += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> c%<span class="number">10</span>==<span class="number">0</span>: <span class="keyword">print</span> <span class="string">"%d / %d"</span> % (c,len(itemPrefs))</span><br><span class="line">        scores=topMatches(itemPrefs,item,n=n,similarity=sim_distance)</span><br><span class="line">        result[item]=scores</span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure></p>
<p>基于物品的推荐值计算，通过Toby已看影片的评分，乘以未看影片之间的相似度，来获取权重。最后归一化处理如下图：<br><img src="http://7xlv6k.com1.z0.glb.clouddn.com/cdn_chapter2_4.png" alt="为Toby提供基于物品的推荐"></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#基于物品的推荐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getRecommendedItems</span><span class="params">(prefs,itemMatch,user)</span>:</span></span><br><span class="line">    userRatings=prefs[user]</span><br><span class="line">    scores=&#123;&#125;</span><br><span class="line">    totalSim=&#123;&#125;</span><br><span class="line"><span class="comment"># Loop over items rated by this user</span></span><br><span class="line">    <span class="keyword">for</span> (item,rating) <span class="keyword">in</span> userRatings.items( ):</span><br><span class="line">      <span class="comment"># Loop over items similar to this one</span></span><br><span class="line">      <span class="keyword">for</span> (similarity,item2) <span class="keyword">in</span> itemMatch[item]:</span><br><span class="line"></span><br><span class="line">        <span class="comment"># Ignore if this user has already rated this item</span></span><br><span class="line">        <span class="keyword">if</span> item2 <span class="keyword">in</span> userRatings: <span class="keyword">continue</span></span><br><span class="line">        <span class="comment"># Weighted sum of rating times similarity</span></span><br><span class="line">        scores.setdefault(item2,<span class="number">0</span>)</span><br><span class="line">        scores[item2]+=similarity*rating</span><br><span class="line">        <span class="comment"># Sum of all the similarities</span></span><br><span class="line">        totalSim.setdefault(item2,<span class="number">0</span>)</span><br><span class="line">        totalSim[item2]+=similarity</span><br><span class="line"></span><br><span class="line"><span class="comment"># Divide each total score by total weighting to get an average</span></span><br><span class="line">    rankings=[(score/totalSim[item],item) <span class="keyword">for</span> item,score <span class="keyword">in</span> scores.items( )]</span><br><span class="line"></span><br><span class="line"><span class="comment"># Return the rankings from highest to lowest</span></span><br><span class="line">    rankings.sort( )</span><br><span class="line">    rankings.reverse( )</span><br><span class="line">    <span class="keyword">return</span> rankings</span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/zthero/python/blob/master/collective/code/test/make_data.py" target="_blank" rel="external">源码</a></p>
<h3 id="思考">思考</h3><ol>
<li>UserCF和ItemCF的比较</li>
<li>归一化处理的更合适方法</li>
<li>与频繁模式挖掘的区别</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[集体智慧编程 读书笔记]]>
    
    </summary>
    
      <category term="供推荐CF" scheme="http://hexo.zthero.com/tags/%E4%BE%9B%E6%8E%A8%E8%8D%90CF/"/>
    
      <category term="集体智慧编程" scheme="http://hexo.zthero.com/tags/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B/"/>
    
      <category term="集体智慧编程" scheme="http://hexo.zthero.com/categories/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[集体智慧编程(一)]]></title>
    <link href="http://hexo.zthero.com/2015/09/09/collective-intelligence-1/"/>
    <id>http://hexo.zthero.com/2015/09/09/collective-intelligence-1/</id>
    <published>2015-09-09T10:41:09.000Z</published>
    <updated>2015-09-09T10:49:57.000Z</updated>
    <content type="html"><![CDATA[<p>很早之前就想看的一本书，非常不错。由于第一章没有什么实质性内容，仅在此处添加目录，方便后续浏览。<br><a id="more"></a></p>
<h3 id="体智慧编程目录">体智慧编程目录</h3><ol>
<li><a href="http://hexo.zthero.com/2015/09/09/collective-intelligence-1/">集体智慧编程目录</a></li>
<li><a href="http://hexo.zthero.com/2015/09/09/collective-intelligence-2/">提供推荐</a></li>
<li><a href="http://hexo.zthero.com/2015/09/09/collective-intelligence-3/">发现群组</a></li>
</ol>
<h3 id="参考资料">参考资料</h3><ul>
<li><a href="http://book.douban.com/subject/3288908/" target="_blank" rel="external">集体编程智慧</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[集体智慧编程 读书笔记]]>
    
    </summary>
    
      <category term="集体智慧编程" scheme="http://hexo.zthero.com/tags/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B/"/>
    
      <category term="集体智慧编程" scheme="http://hexo.zthero.com/categories/%E9%9B%86%E4%BD%93%E6%99%BA%E6%85%A7%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[linux下vim配置markdown插件]]></title>
    <link href="http://hexo.zthero.com/2015/09/07/vim-to-markdown/"/>
    <id>http://hexo.zthero.com/2015/09/07/vim-to-markdown/</id>
    <published>2015-09-07T12:41:09.000Z</published>
    <updated>2015-09-09T10:31:16.000Z</updated>
    <content type="html"><![CDATA[<p>经过baidu查找到的vim-markdown插件，可以很好的支持linux编写markdown。<br><a id="more"></a></p>
<h3 id="安装插件">安装插件</h3><p>同其他插件一样，下载到本地后，复制到指定目录。</p>
<ol>
<li><a href="https://github.com/plasticboy/vim-markdown" target="_blank" rel="external">github下载</a></li>
<li><p>拷贝指定文件</p>
<pre><code>[bash]
<span class="keyword">cp</span> ./<span class="keyword">syntax</span>/mkd.<span class="keyword">vim</span>  ~/.<span class="keyword">vim</span>/<span class="keyword">syntax</span>/
<span class="keyword">cp</span> ./ftdetect/mkd.<span class="keyword">vim</span>  ~/.<span class="keyword">vim</span>/ftdetect/ 
</code></pre></li>
</ol>
<p>重启vim即可</p>
]]></content>
    <summary type="html">
    <![CDATA[vim下配置markdown插件]]>
    
    </summary>
    
      <category term="markdown" scheme="http://hexo.zthero.com/tags/markdown/"/>
    
      <category term="vim" scheme="http://hexo.zthero.com/tags/vim/"/>
    
      <category term="markdown" scheme="http://hexo.zthero.com/categories/markdown/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[markdown学习]]></title>
    <link href="http://hexo.zthero.com/2015/09/07/introduction-to-markdown/"/>
    <id>http://hexo.zthero.com/2015/09/07/introduction-to-markdown/</id>
    <published>2015-09-07T10:41:09.000Z</published>
    <updated>2015-09-09T10:31:29.000Z</updated>
    <content type="html"><![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>
<a id="more"></a>
<p><img src="https://www.zybuluo.com/static/img/logo.png" alt="cmd-markdown-logo"></p>
<p>除了您现在看到的这个 Cmd Markdown 在线版本，您还可以前往以下网址下载：</p>
<h3 id="Windows/Mac/Linux_全平台客户端"><a href="https://www.zybuluo.com/cmd/" target="_blank" rel="external">Windows/Mac/Linux 全平台客户端</a></h3><blockquote>
<p>请保留此份 Cmd Markdown 的欢迎稿兼使用说明，如需撰写新稿件，点击顶部工具栏右侧的 <i class="icon-file"></i> <strong>新文稿</strong> 或者使用快捷键 <code>Ctrl+Alt+N</code>。</p>
</blockquote>
<hr>
<h2 id="什么是_Markdown">什么是 Markdown</h2><p>Markdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：譬如您正在阅读的这份文档。它使用简单的符号标记不同的标题，分割不同的段落，<strong>粗体</strong> 或者 <em>斜体</em> 某些文字，更棒的是，它还可以</p>
<h3 id="1-_制作一份待办事宜_Todo_列表">1. 制作一份待办事宜 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#13-待办事宜-todo-列表" target="_blank" rel="external">Todo 列表</a></h3><ul>
<li>[ ] 支持以 PDF 格式导出文稿</li>
<li>[ ] 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率</li>
<li>[x] 新增 Todo 列表功能</li>
<li>[x] 修复 LaTex 公式渲染问题</li>
<li>[x] 新增 LaTex 公式编号功能</li>
</ul>
<h3 id="2-_书写一个质能守恒公式[^LaTeX]">2. 书写一个质能守恒公式[^LaTeX]</h3><p>$$E=mc^2$$</p>
<h3 id="3-_高亮一段代码[^code]">3. 高亮一段代码[^code]</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@requires_authorization</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># A comment</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">'hello world'</span></span><br></pre></td></tr></table></figure>
<h3 id="4-_高效绘制_流程图">4. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#7-流程图" target="_blank" rel="external">流程图</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">st=&#62;start: Start&#10;op=&#62;operation: Your Operation&#10;cond=&#62;condition: Yes or No?&#10;e=&#62;end&#10;&#10;st-&#62;op-&#62;cond&#10;cond(yes)-&#62;e&#10;cond(no)-&#62;op</span><br></pre></td></tr></table></figure>
<h3 id="5-_高效绘制_序列图">5. 高效绘制 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#8-序列图" target="_blank" rel="external">序列图</a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Alice-&#62;Bob: Hello Bob, how are you?&#10;Note right of Bob: Bob thinks&#10;Bob--&#62;Alice: I am good thanks!</span><br></pre></td></tr></table></figure>
<h3 id="6-_绘制表格">6. 绘制表格</h3><table>
<thead>
<tr>
<th>项目</th>
<th style="text-align:right">价格</th>
<th style="text-align:center">数量</th>
</tr>
</thead>
<tbody>
<tr>
<td>计算机</td>
<td style="text-align:right">\$1600</td>
<td style="text-align:center">5</td>
</tr>
<tr>
<td>手机</td>
<td style="text-align:right">\$12</td>
<td style="text-align:center">12</td>
</tr>
<tr>
<td>管线</td>
<td style="text-align:right">\$1</td>
<td style="text-align:center">234</td>
</tr>
</tbody>
</table>
<h3 id="7-_更详细语法说明">7. 更详细语法说明</h3><p>想要查看更详细的语法说明，可以参考我们准备的 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown" target="_blank" rel="external">Cmd Markdown 简明语法手册</a>，进阶用户可以参考 <a href="https://www.zybuluo.com/mdeditor?url=https://www.zybuluo.com/static/editor/md-help.markdown#cmd-markdown-高阶语法手册" target="_blank" rel="external">Cmd Markdown 高阶语法手册</a> 了解更多高级功能。</p>
<p>总而言之，不同于其它 <em>所见即所得</em> 的编辑器：你只需使用键盘专注于书写文本内容，就可以生成印刷级的排版格式，省却在键盘和工具栏之间来回切换，调整内容和格式的麻烦。<strong>Markdown 在流畅的书写和印刷级的阅读体验之间找到了平衡。</strong> 目前它已经成为世界上最大的技术分享网站 GitHub 和 技术问答网站 StackOverFlow 的御用书写格式。</p>
<hr>
<h2 id="什么是_Cmd_Markdown">什么是 Cmd Markdown</h2><p>您可以使用很多工具书写 Markdown，但是 Cmd Markdown 是这个星球上我们已知的、最好的 Markdown 工具——没有之一 ：）因为深信文字的力量，所以我们和你一样，对流畅书写，分享思想和知识，以及阅读体验有极致的追求，我们把对于这些诉求的回应整合在 Cmd Markdown，并且一次，两次，三次，乃至无数次地提升这个工具的体验，最终将它演化成一个 <strong>编辑/发布/阅读</strong> Markdown 的在线平台——您可以在任何地方，任何系统/设备上管理这里的文字。</p>
<h3 id="1-_实时同步预览">1. 实时同步预览</h3><p>我们将 Cmd Markdown 的主界面一分为二，左边为<strong>编辑区</strong>，右边为<strong>预览区</strong>，在编辑区的操作会实时地渲染到预览区方便查看最终的版面效果，并且如果你在其中一个区拖动滚动条，我们有一个巧妙的算法把另一个区的滚动条同步到等价的位置，超酷！</p>
<h3 id="2-_编辑工具栏">2. 编辑工具栏</h3><p>也许您还是一个 Markdown 语法的新手，在您完全熟悉它之前，我们在 <strong>编辑区</strong> 的顶部放置了一个如下图所示的工具栏，您可以使用鼠标在工具栏上调整格式，不过我们仍旧鼓励你使用键盘标记格式，提高书写的流畅度。</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-editor.png" alt="tool-editor"></p>
<h3 id="3-_编辑模式">3. 编辑模式</h3><p>完全心无旁骛的方式编辑文字：点击 <strong>编辑工具栏</strong> 最右测的拉伸按钮或者按下 <code>Ctrl + M</code>，将 Cmd Markdown 切换到独立的编辑模式，这是一个极度简洁的写作环境，所有可能会引起分心的元素都已经被挪除，超清爽！</p>
<h3 id="4-_实时的云端文稿">4. 实时的云端文稿</h3><p>为了保障数据安全，Cmd Markdown 会将您每一次击键的内容保存至云端，同时在 <strong>编辑工具栏</strong> 的最右侧提示 <code>已保存</code> 的字样。无需担心浏览器崩溃，机器掉电或者地震，海啸——在编辑的过程中随时关闭浏览器或者机器，下一次回到 Cmd Markdown 的时候继续写作。</p>
<h3 id="5-_离线模式">5. 离线模式</h3><p>在网络环境不稳定的情况下记录文字一样很安全！在您写作的时候，如果电脑突然失去网络连接，Cmd Markdown 会智能切换至离线模式，将您后续键入的文字保存在本地，直到网络恢复再将他们传送至云端，即使在网络恢复前关闭浏览器或者电脑，一样没有问题，等到下次开启 Cmd Markdown 的时候，她会提醒您将离线保存的文字传送至云端。简而言之，我们尽最大的努力保障您文字的安全。</p>
<h3 id="6-_管理工具栏">6. 管理工具栏</h3><p>为了便于管理您的文稿，在 <strong>预览区</strong> 的顶部放置了如下所示的 <strong>管理工具栏</strong>：</p>
<p><img src="https://www.zybuluo.com/static/img/toolbar-manager.jpg" alt="tool-manager"></p>
<p>通过管理工具栏可以：</p>
<p><i class="icon-share"></i> 发布：将当前的文稿生成固定链接，在网络上发布，分享<br><i class="icon-file"></i> 新建：开始撰写一篇新的文稿<br><i class="icon-trash"></i> 删除：删除当前的文稿<br><i class="icon-cloud"></i> 导出：将当前的文稿转化为 Markdown 文本或者 Html 格式，并导出到本地<br><i class="icon-reorder"></i> 列表：所有新增和过往的文稿都可以在这里查看、操作<br><i class="icon-pencil"></i> 模式：切换 普通/Vim/Emacs 编辑模式</p>
<h3 id="7-_阅读工具栏">7. 阅读工具栏</h3><p><img src="https://www.zybuluo.com/static/img/toolbar-reader.jpg" alt="tool-manager"></p>
<p>通过 <strong>预览区</strong> 右上角的 <strong>阅读工具栏</strong>，可以查看当前文稿的目录并增强阅读体验。</p>
<p>工具栏上的五个图标依次为：</p>
<p><i class="icon-list"></i> 目录：快速导航当前文稿的目录结构以跳转到感兴趣的段落<br><i class="icon-chevron-sign-left"></i> 视图：互换左边编辑区和右边预览区的位置<br><i class="icon-adjust"></i> 主题：内置了黑白两种模式的主题，试试 <strong>黑色主题</strong>，超炫！<br><i class="icon-desktop"></i> 阅读：心无旁骛的阅读模式提供超一流的阅读体验<br><i class="icon-fullscreen"></i> 全屏：简洁，简洁，再简洁，一个完全沉浸式的写作和阅读环境</p>
<h3 id="8-_阅读模式">8. 阅读模式</h3><p>在 <strong>阅读工具栏</strong> 点击 <i class="icon-desktop"></i> 或者按下 <code>Ctrl+Alt+M</code> 随即进入独立的阅读模式界面，我们在版面渲染上的每一个细节：字体，字号，行间距，前背景色都倾注了大量的时间，努力提升阅读的体验和品质。</p>
<h3 id="9-_标签、分类和搜索">9. 标签、分类和搜索</h3><p>在编辑区任意行首位置输入以下格式的文字可以标签当前文档：</p>
<p>标签： 未分类</p>
<p>标签以后的文稿在【文件列表】（Ctrl+Alt+F）里会按照标签分类，用户可以同时使用键盘或者鼠标浏览查看，或者在【文件列表】的搜索文本框内搜索标题关键字过滤文稿，如下图所示：</p>
<p><img src="https://www.zybuluo.com/static/img/file-list.png" alt="file-list"></p>
<h3 id="10-_文稿发布和分享">10. 文稿发布和分享</h3><p>在您使用 Cmd Markdown 记录，创作，整理，阅读文稿的同时，我们不仅希望它是一个有力的工具，更希望您的思想和知识通过这个平台，连同优质的阅读体验，将他们分享给有相同志趣的人，进而鼓励更多的人来到这里记录分享他们的思想和知识，尝试点击 <i class="icon-share"></i> (Ctrl+Alt+P) 发布这份文档给好友吧！</p>
<hr>
<p>再一次感谢您花费时间阅读这份欢迎稿，点击 <i class="icon-file"></i> (Ctrl+Alt+N) 开始撰写新的文稿吧！祝您在这里记录、阅读、分享愉快！</p>
<p>作者 <a href="http://weibo.com/ghosert" target="_blank" rel="external">@ghosert</a><br>2015 年 06月 15日    </p>
<p>[^LaTeX]: 支持 <strong>LaTeX</strong> 编辑显示支持，例如：$\sum_{i=1}^n a_i=0$， 访问 <a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="external">MathJax</a> 参考更多使用方法。</p>
<p>[^code]: 代码高亮功能支持包括 Java, Python, JavaScript 在内的，<strong>四十一</strong>种主流编程语言。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们理解您需要更便捷更高效的工具记录思想，整理笔记、知识，并将其中承载的价值传播给他人，<strong>Cmd Markdown</strong> 是我们给出的答案 —— 我们为记录思想和分享知识提供更专业的工具。 您可以使用 Cmd Markdown：</p>
<blockquote>
<ul>
<li>整理知识，学习笔记</li>
<li>发布日记，杂文，所见所想</li>
<li>撰写发布技术文稿（代码支持）</li>
<li>撰写发布学术论文（LaTeX 公式支持）</li>
</ul>
</blockquote>]]>
    
    </summary>
    
      <category term="markdown" scheme="http://hexo.zthero.com/tags/markdown/"/>
    
      <category term="markdown" scheme="http://hexo.zthero.com/categories/markdown/"/>
    
  </entry>
  
</feed>
